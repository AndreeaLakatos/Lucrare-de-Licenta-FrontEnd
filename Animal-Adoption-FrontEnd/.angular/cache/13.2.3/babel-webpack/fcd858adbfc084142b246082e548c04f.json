{"ast":null,"code":"import { ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.apiUrl = `${environment.apiUrl}account/`;\n      this.currentUserSubject = new ReplaySubject(1);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n    }\n\n    login(loginUser) {\n      return this.httpClient.post(`${this.apiUrl}login`, loginUser).pipe(map(response => {\n        const user = response;\n\n        if (user) {\n          this.setCurrentUser(user);\n        }\n      }));\n    }\n\n    register(registerUser) {\n      return this.httpClient.post(`${this.apiUrl}register`, registerUser);\n    }\n\n    setCurrentUser(user) {\n      user.roles = [];\n      const roles = this.getDecodedToken(user.token).role;\n\n      if (Array.isArray(roles)) {\n        user.roles = roles;\n      } else {\n        user.roles.push(roles);\n      }\n\n      this.currentUserSubject.next(user);\n    }\n\n    getDecodedToken(token) {\n      return JSON.parse(atob(token.split('.')[1]));\n    }\n\n    logout() {\n      this.currentUserSubject.next(undefined);\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}